import numpy as np

# AES constants
AES_BLOCK_SIZE = 16
Nk = 4  # Number of 32-bit words in the key
Nr = 14  # Number of rounds for AES-256
Nb = 4  # Number of columns (32-bit words) in the state


# S-box and Inverse S-box
sbox = np.array([
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,  # 0
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,  # 1
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,  # 2
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,  # 3
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,  # 4
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,  # 5
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,  # 6
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,  # 7
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,  # 8
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,  # 9
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,  # A
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,  # B
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,  # C
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,  # D
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,  # E
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16   # F
], dtype=np.uint8)

inv_sbox = np.array([
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,  # 0
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,  # 1
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,  # 2
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,  # 3
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,  # 4
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,  # 5
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x6f,  # 6
    0x78, 0x3c, 0x9f, 0x3f, 0x6a, 0x0f, 0x53, 0x99, 0x69, 0x0b, 0x5b, 0x30, 0xe1, 0x75, 0x1a, 0x5d,  # 7
    0x3c, 0x89, 0x31, 0x18, 0x8f, 0xf1, 0xe3, 0x2e, 0xe5, 0xa9, 0x36, 0x6b, 0x19, 0x87, 0xd1, 0x1c,  # 8
    0xc0, 0x53, 0xe1, 0x14, 0x67, 0x85, 0xf8, 0x34, 0x6b, 0x95, 0xf0, 0xf3, 0xe5, 0xd9, 0xc4, 0x29,  # 9
    0x79, 0xd3, 0x6d, 0xa8, 0x9e, 0x75, 0xf4, 0x48, 0x3a, 0xe0, 0x4f, 0xf5, 0x26, 0x99, 0x61, 0x2e,  # A
    0x8d, 0xf6, 0x30, 0xe4, 0xd1, 0x09, 0x9a, 0x56, 0x3b, 0xe9, 0x36, 0xf5, 0x6b, 0x51, 0x8f, 0xe0,  # B
    0x4f, 0x4f, 0x3f, 0xf9, 0x25, 0xa3, 0xa1, 0x55, 0x59, 0xd4, 0xa4, 0x64, 0x89, 0x68, 0x1f, 0x99,  # C
    0x83, 0x12, 0x80, 0x5e, 0x58, 0xf5, 0x8f, 0x66, 0x2f, 0x8f, 0x77, 0xc6, 0x3e, 0xe1, 0xa0, 0x57,  # D
    0x54, 0xe8, 0xf1, 0x72, 0x77, 0xe9, 0x99, 0xc2, 0x1f, 0x87, 0x83, 0x75, 0xe3, 0x18, 0x48, 0x62,  # E
    0xb5, 0xa3, 0x38, 0x72, 0x99, 0xf4, 0x5e, 0x38, 0x1a, 0x1d, 0x36, 0x5b, 0x76, 0x5d, 0x78, 0x10   # F
], dtype=np.uint8)

# Round Constant array
rcon = np.array([0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], dtype=np.uint8)

# Key Expansion
def key_expansion(key):
    key_schedule = np.zeros((Nb * (Nr + 1), 4), dtype=np.uint8)
    for i in range(Nk):
        key_schedule[i, :] = key[i * 4:(i + 1) * 4]
    for i in range(Nk, Nb * (Nr + 1)):
        temp = key_schedule[i - 1, :].copy()
        if i % Nk == 0:
            temp = np.roll(temp, -1)
            temp = sbox[temp]
            temp ^= rcon[i // Nk - 1]  # Adjusted for the rcon index
        key_schedule[i, :] = key_schedule[i - Nk, :] ^ temp
    return key_schedule

# Add Round Key
def add_round_key(state, round_key):
    return state ^ round_key

# SubBytes
def sub_bytes(state):
    return sbox[state]

# Inverse SubBytes
def inv_sub_bytes(state):
    return inv_sbox[state]

# Shift Rows
def shift_rows(state):
    return np.array([np.roll(state[i, :], -i) for i in range(4)])

# Inverse Shift Rows
def inv_shift_rows(state):
    return np.array([np.roll(state[i, :], i) for i in range(4)])

# Mix Columns
def mix_columns(state):
    for i in range(4):
        col = state[:, i]
        state[:, i] = [
            galois_mult(col[0], 2) ^ galois_mult(col[1], 3) ^ col[2] ^ col[3],
            col[0] ^ galois_mult(col[1], 2) ^ galois_mult(col[2], 3) ^ col[3],
            col[0] ^ col[1] ^ galois_mult(col[2], 2) ^ galois_mult(col[3], 3),
            galois_mult(col[0], 3) ^ col[1] ^ col[2] ^ galois_mult(col[3], 2)
        ]
    return state

# Inverse Mix Columns
def inv_mix_columns(state):
    for i in range(4):
        col = state[:, i]
        state[:, i] = [
            galois_mult(col[0], 0x0e) ^ galois_mult(col[1], 0x0b) ^ galois_mult(col[2], 0x0d) ^ galois_mult(col[3], 0x09),
            galois_mult(col[0], 0x09) ^ galois_mult(col[1], 0x0e) ^ galois_mult(col[2], 0x0b) ^ galois_mult(col[3], 0x0d),
            galois_mult(col[0], 0x0d) ^ galois_mult(col[1], 0x09) ^ galois_mult(col[2], 0x0e) ^ galois_mult(col[3], 0x0b),
            galois_mult(col[0], 0x0b) ^ galois_mult(col[1], 0x0d) ^ galois_mult(col[2], 0x09) ^ galois_mult(col[3], 0x0e)
        ]
    return state

# Galois Field multiplication
def galois_mult(a, b):
    p = 0
    for _ in range(8):
        if b & 1:
            p ^= a
        hi_bit_set = a & 0x80
        a <<= 1
        if hi_bit_set:
            a ^= 0x1b
        b >>= 1
    return p % 256

# AES Encryption
def aes_encrypt(plaintext, key):
    state = np.array(list(plaintext), dtype=np.uint8).reshape(4, 4)
    key_schedule = key_expansion(key)
    
    print(f"round[ {0}].input {''.join([hex(b)[2:].zfill(2) for b in state.flatten().tolist()])}")
    print(f"round[ {0}].k_sch {''.join([hex(b)[2:].zfill(2) for b in key_schedule[:4, :].flatten().tolist()])}")
    
    state = add_round_key(state, key_schedule[:4, :])

    for round in range(1, Nr):
        print(f"round[ {round}].start {''.join([hex(b)[2:].zfill(2) for b in state.flatten().tolist()])}")
        state = sub_bytes(state)
        print(f"round[ {round}].s_box {''.join([hex(b)[2:].zfill(2) for b in state.flatten().tolist()])}")
        state = shift_rows(state)
        print(f"round[ {round}].s_row {''.join([hex(b)[2:].zfill(2) for b in state.flatten().tolist()])}")
        state = mix_columns(state)
        print(f"round[ {round}].m_col {''.join([hex(b)[2:].zfill(2) for b in state.flatten().tolist()])}")
        state = add_round_key(state, key_schedule[round * 4:(round + 1) * 4])
        print(f"round[ {round}].k_sch {''.join([hex(b)[2:].zfill(2) for b in key_schedule[round * 4:(round + 1) * 4].flatten().tolist()])}")

    print(f"round[{Nr}].start {''.join([hex(b)[2:].zfill(2) for b in state.flatten().tolist()])}")
    state = sub_bytes(state)
    print(f"round[{Nr}].s_box {''.join([hex(b)[2:].zfill(2) for b in state.flatten().tolist()])}")
    state = shift_rows(state)
    print(f"round[{Nr}].s_row {''.join([hex(b)[2:].zfill(2) for b in state.flatten().tolist()])}")
    state = add_round_key(state, key_schedule[Nr * 4:(Nr + 1) * 4])
    print(f"round[{Nr}].k_sch {''.join([hex(b)[2:].zfill(2) for b in key_schedule[Nr * 4:(Nr + 1) * 4].flatten().tolist()])}")

    return state.flatten()

# Hardcoded plaintext and key for AES-256
plaintext = [
    0x00, 0x11, 0x22, 0x33,
    0x44, 0x55, 0x66, 0x77,
    0x88, 0x99, 0xaa, 0xbb,
    0xcc, 0xdd, 0xee, 0xff
]

key = [
    0x00, 0x01, 0x02, 0x03,
    0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0a, 0x0b,
    0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13,
    0x14, 0x15, 0x16, 0x17,
    0x18, 0x19, 0x1a, 0x1b,
    0x1c, 0x1d, 0x1e, 0x1f
]

ciphertext = aes_encrypt(plaintext, key)
print(f"round[{Nr}].output {''.join([hex(b)[2:].zfill(2) for b in ciphertext.tolist()])}")