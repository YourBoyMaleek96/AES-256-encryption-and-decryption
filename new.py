# AES constants
AES_BLOCK_SIZE = 16
Nk = 8  # Number of 32-bit words in the key for AES-256
Nr = 14  # Number of rounds for AES-256
Nb = 4  # Number of columns (32-bit words) in the state

# S-box and Inverse S-box
sbox = [
   0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
   0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
   0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
   0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
   0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
   0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
   0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
   0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
   0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
   0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
   0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
   0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
   0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
   0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
   0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
   0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]


inv_sbox = [
   0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
   0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
   0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
   0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
   0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
   0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
   0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x6f,
   0x01, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21,
   0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d,
   0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14,
   0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62,
   0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea,
   0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f,
   0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
   0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9,
   0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f
]


# Round Constant array (RCON)
rcon = [
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
    0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6,
    0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91
]

# MUL2 lookup table for mix columns
MUL2 = [
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
    0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
    0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
    0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
    0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
    0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
    0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
    0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
    0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
    0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
    0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
    0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
    0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
    0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
    0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
    0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5
]


def hex_string_to_bytes(hex_str):
    """Convert hex string to bytes"""
    return list(bytes.fromhex(hex_str))

def create_matrix(data):
    """Convert bytes to 4x4 matrix"""
    matrix = [[0 for _ in range(4)] for _ in range(4)]
    for i in range(4):
        for j in range(4):
            matrix[i][j] = data[i + 4*j]
    return matrix

def matrix_to_bytes(matrix):
    """Convert 4x4 matrix to bytes"""
    result = []
    for i in range(4):
        for j in range(4):
            result.append(matrix[j][i])
    return bytes(result)

def key_expansion(key):
    """Generate round keys from the cipher key"""
    print(f"Starting key expansion with key length: {len(key)}")
    
    # Initialize the expanded key array
    w = []
    for i in range(60):  # 60 = 4 * (Nr + 1) where Nr = 14
        w.append([0, 0, 0, 0])
    
    # Copy the original key into the first 8 words
    k = 0
    for i in range(8):
        for j in range(4):
            w[i][j] = key[k]
            k += 1
    
    # Generate the remaining words
    for i in range(8, 60):
        temp = w[i-1][:]
        
        if i % 8 == 0:
            # RotWord
            temp = temp[1:] + [temp[0]]
            # SubWord
            for j in range(4):
                temp[j] = sbox[temp[j]]
            # XOR with Rcon
            temp[0] ^= rcon[i//8 - 1]
        elif i % 8 == 4:
            # SubWord only
            for j in range(4):
                temp[j] = sbox[temp[j]]
        
        # XOR with word 8 positions back
        for j in range(4):
            w[i][j] = w[i-8][j] ^ temp[j]
    
    # Convert to round keys format
    round_keys = []
    for i in range(Nr + 1):
        key_matrix = [[0 for _ in range(4)] for _ in range(4)]
        for j in range(4):
            for k in range(4):
                key_matrix[k][j] = w[4*i + j][k]
        round_keys.append(key_matrix)
    
    return round_keys

def add_round_key(state, round_key):
    """XOR state with round key"""
    for i in range(4):
        for j in range(4):
            state[i][j] ^= round_key[i][j]
    return state

def sub_bytes(state):
    """Apply S-box substitution"""
    for i in range(4):
        for j in range(4):
            state[i][j] = sbox[state[i][j]]
    return state

def shift_rows(state):
    """ShiftRows transformation"""
    return [
        state[0],
        state[1][1:] + [state[1][0]],
        state[2][2:] + state[2][:2],
        state[3][3:] + state[3][:3]
    ]

def mix_columns(state):
    """MixColumns transformation using MUL2 lookup table"""
    new_state = [row[:] for row in state]
    
    for i in range(4):
        s0, s1, s2, s3 = state[0][i], state[1][i], state[2][i], state[3][i]
        
        new_state[0][i] = MUL2[s0] ^ (MUL2[s1] ^ s1) ^ s2 ^ s3
        new_state[1][i] = s0 ^ MUL2[s1] ^ (MUL2[s2] ^ s2) ^ s3
        new_state[2][i] = s0 ^ s1 ^ MUL2[s2] ^ (MUL2[s3] ^ s3)
        new_state[3][i] = (MUL2[s0] ^ s0) ^ s1 ^ s2 ^ MUL2[s3]
    
    return new_state

def aes_encrypt(plaintext, key):
    """AES encryption function"""
    print(f"Starting encryption with plaintext length: {len(plaintext)}, key length: {len(key)}")
    
    # Create state matrix
    state = create_matrix(plaintext)
    print(f"Created state matrix")
    
    # Generate round keys
    round_keys = key_expansion(key)
    print(f"Generated {len(round_keys)} round keys")
    
    # Initial round
    state = add_round_key(state, round_keys[0])
    
    # Main rounds
    for round in range(1, Nr):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, round_keys[round])
    
    # Final round
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, round_keys[Nr])
    
    # Convert back to bytes
    return matrix_to_bytes(state)

def format_state(state):
    """Format state matrix as hex string"""
    return ''.join([format(state[i][j], '02x') 
                   for j in range(4) 
                   for i in range(4)])

def hex_string_to_bytes(hex_str):
    """Alternative implementation using bytes.fromhex()"""
    try:
        return list(bytes.fromhex(hex_str))
    except ValueError:
        raise ValueError("Invalid hexadecimal string")

def inv_sub_bytes(state):
    """Inverse SubBytes transformation using inv_sbox"""
    for i in range(4):
        for j in range(4):
            state[i][j] = inv_sbox[state[i][j]]
    return state

def inv_shift_rows(state):
    """Inverse ShiftRows transformation using list slicing"""
    return [
        state[0],
        state[1][-1:] + state[1][:-1],
        state[2][-2:] + state[2][:-2],
        state[3][-3:] + state[3][:-3]
    ]

def inv_mix_columns(state):
    """Inverse MixColumns transformation using lookup tables"""
    new_state = [row[:] for row in state]
    
    for i in range(4):
        s0, s1, s2, s3 = state[0][i], state[1][i], state[2][i], state[3][i]
        
        # Using MUL2 and XOR operations for inverse mix columns
        new_state[0][i] = (MUL2[MUL2[MUL2[s0]]] ^ MUL2[MUL2[s1]] ^ MUL2[s2] ^ s3)
        new_state[1][i] = (s0 ^ MUL2[MUL2[MUL2[s1]]] ^ MUL2[MUL2[s2]] ^ MUL2[s3])
        new_state[2][i] = (MUL2[s0] ^ s1 ^ MUL2[MUL2[MUL2[s2]]] ^ MUL2[MUL2[s3]])
        new_state[3][i] = (MUL2[MUL2[s0]] ^ MUL2[s1] ^ s2 ^ MUL2[MUL2[MUL2[s3]]])
    
    return new_state

def aes_decrypt(ciphertext, key):
    """AES decryption function"""
    # Convert ciphertext to state matrix
    state = create_matrix(ciphertext)
    
    # Generate round keys
    round_keys = key_expansion(key)
    
    # Initial round
    print(f"round[ 0].iinput {format_state(state)}")
    print(f"round[ 0].ik_sch {format_state(round_keys[Nr])}")
    state = add_round_key(state, round_keys[Nr])
    
    # Main rounds (in reverse order)
    for round in range(Nr-1, 0, -1):
        print(f"round[{Nr-round:2d}].istart {format_state(state)}")
        
        state = inv_shift_rows(state)
        print(f"round[{Nr-round:2d}].is_row {format_state(state)}")
        
        state = inv_sub_bytes(state)
        print(f"round[{Nr-round:2d}].is_box {format_state(state)}")
        
        print(f"round[{Nr-round:2d}].ik_sch {format_state(round_keys[round])}")
        state = add_round_key(state, round_keys[round])
        print(f"round[{Nr-round:2d}].ik_add {format_state(state)}")
        
        state = inv_mix_columns(state)
        print(f"round[{Nr-round:2d}].im_col {format_state(state)}")
    
    # Final round
    print(f"round[{Nr}].istart {format_state(state)}")
    
    state = inv_shift_rows(state)
    print(f"round[{Nr}].is_row {format_state(state)}")
    
    state = inv_sub_bytes(state)
    print(f"round[{Nr}].is_box {format_state(state)}")
    
    print(f"round[{Nr}].ik_sch {format_state(round_keys[0])}")
    state = add_round_key(state, round_keys[0])
    
    print(f"round[{Nr}].ioutput {format_state(state)}")
    
    return matrix_to_list(state)

def main():
    while True:
        print("\n" + "=" * 50)
        print("AES-256 Encryption/Decryption")
        print("=" * 50)
        print("1. Encrypt")
        print("2. Decrypt")
        print("3. Exit")
        
        choice = input("\nEnter your choice (1-3): ").strip()
        
        if choice == '3':
            print("\nExiting program...")
            break
        
        try:
            if choice == '1':
                # Get input
                print("\nEnter plaintext (32 hex characters):")
                print("Example: 00112233445566778899aabbccddeeff")
                text = input().strip()
                
                print("\nEnter key (64 hex characters):")
                print("Example: 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")
                key = input().strip()
                
                # Convert and validate input
                text_bytes = hex_string_to_bytes(text)
                key_bytes = hex_string_to_bytes(key)
                
                print(f"Converted text length: {len(text_bytes)}")
                print(f"Converted key length: {len(key_bytes)}")
                
                if len(text_bytes) != 16:
                    print("Error: Plaintext must be exactly 16 bytes (32 hex characters)")
                    continue
                if len(key_bytes) != 32:
                    print("Error: Key must be exactly 32 bytes (64 hex characters)")
                    continue
                
                # Encrypt
                print("\nCIPHER (ENCRYPT):")
                result = aes_encrypt(text_bytes, key_bytes)
                print(f"\nEncrypted (hex): {result.hex()}")
                
            elif choice == '2':
                # Decryption to be implemented
                pass
                
        except ValueError as e:
            print(f"\nError: Invalid hex input - {str(e)}")
        except Exception as e:
            print(f"\nError: {str(e)}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    main()
